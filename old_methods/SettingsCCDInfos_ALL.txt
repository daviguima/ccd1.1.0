'''def create_filter_wheel_info_group(self):
        group_box = QGroupBox("&Filter Wheel Info")

        self.serial_filter_wheel_info_l = QtWidgets.QLabel("Serial Port: ", self)
        self.serial_filter_wheel_info_l.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)

        try:
            motor_door_aux = str(self.roda_filtros.motor_door)
        except Exception as e:
            print(e)
            motor_door_aux = "???"

        self.serial_filter_wheel_info_f = QtWidgets.QLabel(motor_door_aux, self)
        self.serial_filter_wheel_info_f.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)

        self.slots_filter_wheel_info_l = QtWidgets.QLabel("Filter Slot: ", self)
        self.slots_filter_wheel_info_l.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.slots_filter_wheel_info_f = QtWidgets.QLabel("6", self)
        self.slots_filter_wheel_info_f.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)

        self.tempt_filter_wheel_info_l = QtWidgets.QLabel("Filter Temperature: ", self)
        self.tempt_filter_wheel_info_l.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.tempt_filter_wheel_info_f = QtWidgets.QLabel("25 °C", self)
        self.tempt_filter_wheel_info_f.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)

        group_box.setLayout(set_lvbox(set_hbox(self.serial_filter_wheel_info_l, self.serial_filter_wheel_info_f),
                                      set_hbox(self.slots_filter_wheel_info_l, self.slots_filter_wheel_info_f),
                                      set_hbox(self.tempt_filter_wheel_info_l, self.tempt_filter_wheel_info_f)))

        return group_box

    def create_filter_wheel_group(self):
        group_box = QGroupBox("&Filter Wheel Control")
        group_box.setCheckable(True)
        group_box.setChecked(False)
        self.shutter_l = QtWidgets.QLabel("Shutter status:", self)
        self.shutter_l.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.close_open_filter_wheel_info = QtWidgets.QLabel("Closed")
        self.close_open_filter_wheel_info.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)

        self.btn_set_shutter = QtWidgets.QPushButton('Set shutter', self)
        self.close_open_filter_wheel = QtWidgets.QComboBox(self)
        self.close_open_filter_wheel.setMaximumWidth(100)
        self.fill_combo_close_open_filter_wheel_shutter()

        filter_position = self.roda_filtros.get_current_filter()

        if filter_position == "None":
            filter_position = "1"

        self.get_filter_l = QtWidgets.QLabel('Current filter:', self)
        self.filter_position = QtWidgets.QLabel(filter_position)
        self.filter_position.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.filter_position.setMinimumWidth(60)

        self.btn_set_filter = QtWidgets.QPushButton('Set filter', self)
        self.set_filter_position = QtWidgets.QComboBox(self)
        self.set_filter_position.setMaximumWidth(100)
        self.fill_combo_filter_position()

        self.btn_home_position_filter = QtWidgets.QPushButton('Home Reset', self)

        group_box.setLayout(set_lvbox(set_hbox(self.shutter_l, self.close_open_filter_wheel_info),
                                      set_hbox(self.btn_set_shutter, self.close_open_filter_wheel),
                                      set_hbox(self.get_filter_l, self.filter_position, stretch2=1),
                                      set_hbox(self.btn_set_filter, self.set_filter_position),
                                      set_hbox(self.btn_home_position_filter)))
        return group_box'''



'''def get_info_pixels(self):
        # Function to get the CCD Info
        # This function will return [Pixels]

        ret = None
        self.lock.set_acquire()
        try:
            ret = tuple(ccdinfo())
        except Exception as e:
            self.console.raise_text("Failed to get camera information.\n{}".format(e))
        finally:
            self.lock.set_release()
        return ret'''

    '''def fill_combo_close_open_filter_wheel_shutter(self):
        self.close_open_filter_wheel.addItem("Closed", 2)
        self.close_open_filter_wheel.addItem("Opened", 1)'''

    '''def func_close_open_shutter(self):
        my_slot_close_open_shutter = self.close_open_filter_wheel.currentIndex()

        if my_slot_close_open_shutter == 0:
            self.roda_filtros.close_shutter()
            self.select_filter_shutter = "Closed"
            self.console.raise_text("Shutter Filter Wheel Closed", 1)
            self.close_open.setText("Closed")
            self.close_open_filter_wheel_info.setText("Closed")
        else:
            self.roda_filtros.open_shutter()
            self.select_filter_shutter = "Opened"
            self.console.raise_text("Shutter Filter Wheel Opened ", 1)
            self.close_open.setText("Opened")
            self.close_open_filter_wheel_info.setText("Opened")

    def fill_combo_filter_position(self):
        self.set_filter_position.addItem("1", 1)
        self.set_filter_position.addItem("2", 2)
        self.set_filter_position.addItem("3", 3)
        self.set_filter_position.addItem("4", 4)
        self.set_filter_position.addItem("5", 5)
        self.set_filter_position.addItem("6", 6)'''

    '''def func_filter_position(self):
        available_filters_list_and_commons = get_filter_settings()
        available_filters_list_and_commons = list(available_filters_list_and_commons)

        permited_filters = ''

        for x in available_filters_list_and_commons:
            permited_filters += str(x)

        try:
            if self.roda_filtros.connect_state:
                sleep(1)
                wish_filter_int = self.set_filter_position.currentIndex() + 1
                aux = 1
                for x in permited_filters:
                    if int(wish_filter_int) == int(x):
                        aux = 0

                if aux == 0:
                    self.roda_filtros.filter_wheel_control(int(wish_filter_int))
                else:
                    self.console.raise_text("There is no filter on slot number " + str(wish_filter_int) + "!", 3)
                    self.console.raise_text("Please include a new filter on the Filters Settings Menu!", 3)

                sleep(1)
        except Exception as e:
            print("def func_filter_position(self): -> " + str(e))

        finally:
            if aux == 0:
                if self.roda_filtros.connect_state:
                    self.select_filter_manual = wish_filter_int

                    self.filter_position.setText(str(wish_filter_int))
                    self.console.raise_text("Filter Position: {}".format(str(wish_filter_int)), 2)
                else:
                    self.filter_position.setText("?")
                    self.console.raise_text("Filter Wheel is not connect!", 3)

    def button_settings(self):
        self.btn_set_shutter.clicked.connect(self.func_close_open_shutter)
        self.btn_set_filter.clicked.connect(self.func_filter_position)
        self.btn_home_position_filter.clicked.connect(self.func_home_position)'''

    '''def func_home_position(self):
        try:
            if self.roda_filtros.connect_state:
                sleep(0.5)
                print("Home Position")
                self.roda_filtros.home_reset()
                sleep(1)
        except Exception as e:
            print(e)
        finally:
            if self.roda_filtros.connect_state:
                self.filter_position.setText("1")
                self.console.raise_text("Filter Position: 1", 2)
                self.console.raise_text("Shutter Filter Wheel Closed", 1)
                self.close_open.setText("Closed")
                self.close_open_filter_wheel_info.setText("Closed")
                self.select_filter_shutter = "Closed"
            else:
                self.filter_position.setText("?")
                self.console.raise_text("Filter Wheel is not connect!", 3)'''